[{"id":0,"href":"/MapProxy_Workshop_Praxiseinsatz/docs/config/","title":"Config","section":"Docs","content":"Konfiguration #  MapProxy wird mittels übersichtlichen yaml-Dateien konfiguriert, wobei ebenso eine JSON-Konfiguration gültig ist. Sämtliche Beispiele in der Dokumentation sind in YAML beschrieben.\nEs sind Key-Value-Paare und Listen möglich:\n options-name: value [1,2,3] Wichtig zu beachten: korrekte Einrückung Leerzeichen nach Doppelpunkt Anführungszeichen um Strings -\u0026gt; [\u0026ldquo;EPSG:4326\u0026rdquo;]  Die zentrale Konfigurationsdatei ist die mapproxy.yaml, nachfolgend ein Auszug aus einem Beispiel:\nservices: demo: wms: srs: [\u0026#39;EPSG:4326\u0026#39;, \u0026#39;EPSG:900913\u0026#39;, \u0026#39;EPSG:3857\u0026#39;, \u0026#39;EPSG:4258\u0026#39;, \u0026#39;EPSG:26915\u0026#39;] # image_formats: [\u0026#39;image/jpeg\u0026#39;, \u0026#39;image/png\u0026#39;] md: # metadata used in capabilities documents title: MapProxy WMS Proxy abstract: This is the fantastic MapProxy. online_resource: http://mapproxy.org/ contact: person: Your Name Here position: Technical Director access_constraints: This service is intended for private and evaluation use only. The data is licensed as Creative Commons Attribution-Share Alike 2.0 (http://creativecommons.org/licenses/by-sa/2.0/) fees: \u0026#39;None\u0026#39; layers: - name: mapnik title: World population (Mapnik) sources: [mapnik] caches: mapnik_cache: grids: [GLOBAL_MERCATOR] sources: [tilestache] sources: geoserver: type: wms wms_opts: featureinfo: true req: url: http://localhost:8082/geoserver/wms? layers: \u0026#39;topp:states\u0026#39; transparent: true coverage: bbox: -124.73142200000001,24.955967,-66.969849,49.371735 bbox_srs: \u0026#39;EPSG:4326\u0026#39; grids: global_geodetic_sqrt2: base: GLOBAL_GEODETIC res_factor: \u0026#39;sqrt2\u0026#39; global_mercator_inverse: base: GLOBAL_MERCATOR origin: nw # # cache options cache: # where to store the cached images base_dir: \u0026#39;/tmp/mapproxy/cache_data\u0026#39; # where to store lockfiles lock_dir: \u0026#39;/tmp/mapproxy/cache_data/locks\u0026#39; # # request x*y tiles in one step # meta_size: [4, 4] # # add a buffer on all sides (in pixel) when requesting # # new images # meta_buffer: 80 Seeding #  Neben dieser Haupt-Konfigurationsdatei wird oftmals eine Konfigurationsdatei für eine mapproxy-seed eingesetzt:\n# ####################################s################################ # MapProxy example seed configuration # ##################################################################### # # This is _not_ a runnable configuration, but it contains most # available options in meaningful combinations. # # Use this file in addition to the documentation to see where and how # things can be configured. seeds: myseed1: # seed all grids of this cache caches: [osm_cache] levels: to: 10 refresh_before: # re-generate tiles older than this date time: 2013-10-10T12:35:00 myseed2: # seed two caches, but only GLOBAL_GEODETIC grid caches: [cache1, cache2] grids: [GLOBAL_GEODETIC] levels: to: 14 refresh_before: # re-generate tiles older than the modification time # of this file. on linux/unix use `touch` to change the time. mtime: ./reseed.time cleanups: cleanup_older_tiles: caches: [osm_cache] remove_before: days: 30 levels: from: 16 remove_complete_levels: caches: [cache1] # remove all tiles regardless of the timestamp. # will remove the complete level directory for `file` caches remove_all: true levels: [14, 18, 19, 20] remove_changes: caches: [cache1] # be careful when using cleanup with coverages, since it needs to check # every possible tile in this coverage (as reported by # `mapproxy-util grids --coverage`). only use small coverages and/or limit # levels coverages: [changed_area] # without remove_before: remove all tiles created before you called # mapproxy-seed. i.e. tiles created before with in this seed run # are not removed levels: from: 14 to: 17 coverages: germany: # any source supported by OGR datasource: \u0026#39;shps/world_boundaries_m.shp\u0026#39; where: \u0026#39;CNTRY_NAME = \u0026#34;Germany\u0026#34;\u0026#39; srs: \u0026#39;EPSG:3857\u0026#39; austria: # simple bbox bbox: [9.36, 46.33, 17.28, 49.09] srs: \u0026#34;EPSG:4326\u0026#34; switzerland: # text file with WKT (Multi)Polygons datasource: \u0026#39;polygons/SZ.txt\u0026#39; srs: \u0026#34;EPSG:3857\u0026#34; changed_area: # example with PostGIS query datasource: \u0026#34;PG: dbname=\u0026#39;db\u0026#39; host=\u0026#39;host\u0026#39; user=\u0026#39;user\u0026#39; password=\u0026#39;password\u0026#39;\u0026#34; where: \u0026#34;select * from last_changes\u0026#34; srs: \u0026#39;EPSG:3857\u0026#39; "},{"id":1,"href":"/MapProxy_Workshop_Praxiseinsatz/docs/config/bausteine/","title":"Bausteine","section":"Config","content":"Bausteine #   Cache WMS/Kacheldienst #   Mehrere Quellen #   Komplexer Layer #   "},{"id":2,"href":"/MapProxy_Workshop_Praxiseinsatz/docs/introduction/installation/","title":"Installation","section":"Docs","content":"Installation #  Es gibt verschiende Möglichkeiten MapProxy zu installieren:\n Systemweite Installation (wie auf der OS Geo Live)\npython -m pip install MapProxy Virtual Environment (Anleitung) Über ein docker image (z.B. kartoza)  Abhängigkeiten #   PyYAML Pillow (Python Image Library) pyproj Shapely GDAL lxml  "},{"id":3,"href":"/MapProxy_Workshop_Praxiseinsatz/docs/introduction/sources/","title":"Sources","section":"Docs","content":"Quellen #   WMS (1.0.0/1.1.0/1.1.1/1.3.0) WMS-C WMTS TMS Kacheln (Google Maps, Bing, etc.) Mapnik MapServer ArcGIS REST  Dienste #   WMS (1.0.0/1.1.0/1.1.1/1.3.0) WMS-C WMTS/TMS KML  "}]